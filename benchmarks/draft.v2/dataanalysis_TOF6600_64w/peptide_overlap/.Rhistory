p <- p + geom_histogram()
p <- p + theme_classic(base_size=15) + xlab("Is outlier") + ylab("number of cases")
print(p)
summary_outliers <- rts_w_complete %>% group_by(is_outlier) %>% summarise(cases = n())
num_outliers <- (summary_outliers %>% filter(is_outlier == T))$cases
num_no_outliers <- (summary_outliers %>% filter(is_outlier == F))$cases
percent_outliers <- round( (num_outliers / num_no_outliers) * 100, digits=1)
p <- ggplot(filter(rts_w_complete, is_outlier == T), aes(factor(outlier), fill = outlier))
p <- p + theme_classic(base_size=15) + xlab("Tools") + ylab("number of outliers")
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + geom_bar()
print(p)
View(summary_outliers)
summary_by_tool <- rts_w_complete %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = n()/nrow(rts_w_complete) )
View(summary_by_tool)
View(rts_w_complete)
summary_by_tool <- rts_w_complete %>%
group_by(outlier, is_outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = n()/nrow(rts_w_complete) )
View(summary_by_tool)
summary_by_tool <- rts_w_complete %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = n()/nrow(rts_w_complete) )
View(summary_by_tool)
nrow(rts_w_complete)
summary_by_tool <- rts_w_complete %>%
group_by(outlier, is_outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = n()/nrow(rts_w_complete) )
View(summary_by_tool)
summary_by_tool <- rts_w_complete %>% filter(is_outlier == T) %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = n()/nrow(rts_w_complete) )
View(summary_by_tool)
summary_by_tool <- rts_w_complete %>% filter(is_outlier == T) %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = round(n()/nrow(rts_w_complete) * 100, digits=2) )
View(summary_outliers)
View(summary_by_tool)
summary_by_tool <- rts_w_complete %>% filter(is_outlier == T) %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = round(n()/nrow(rts_w_complete) * 100, digits=1) )
summary_by_tool <- rts_w_complete %>% filter(is_outlier == T) %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.percent = round(n()/nrow(rts_w_complete) , digits=4) )
View(summary_by_tool)
summary_by_tool <- rts_w_complete %>% filter(is_outlier == T) %>%
group_by(outlier) %>%
summarise(Outlier.count = n(), Outlier.ratio = round(n()/nrow(rts_w_complete) , digits=4) )
View(summary_outliers)
View(summary_by_tool)
loadLibrary("pander")
pander(summary_by_tool, style='rmarkdown')
??eval
library(LFQbench)
evalCommandLineArguments
LFQbench::
ls("LFQbench:ts")
ls("LFQbench")
ls("package:LFQbench")
lsf.str("package:LFQbench")
library(LFQbench)
library(LFQbench)
library(LFQbench)
rm( list=ls() )
LFQbench::
ls(package::LFQbench)
ls("package:LFQbench")
remove.packages(LFQbench)
remove.packages("LFQbench")
library(LFQbench)
library(devtools)
install_github("IFIproteomics/LFQbench")
library(LFQbench)
evalCommandLineArguments()
LFQbench::Error: could not find function "evalCommandLineArguments"
LFQbench::evalCommandLineArguments()
??LFQbench::evalCommandLineArguments
setwd("~/Dropbox/PAPER_SWATHbenchmark_prv/2.peak_interferences/interferences")
source('~/Dropbox/PAPER_SWATHbenchmark_prv/2.peak_interferences/interferences/interferences.R', echo=TRUE)
source('~/Dropbox/PAPER_SWATHbenchmark_prv/2.peak_interferences/interferences/interferences.R', echo=TRUE)
rm( list=ls() )
library(dplyr)
library(ggplot2)
read.data <- function(file){
dat <- read.table(file,header=T,sep="\t")
dat$fname <- file
return(dat)
}
dataset <- do.call(rbind, lapply(list.files(pattern="xls$"),read.data))
setwd("~/Dropbox/PAPER_SWATHbenchmark_prv/2.peak_interferences/signaltonoise")
rm( list=ls() )
library(dplyr)
library(ggplot2)
read.data <- function(file){
dat <- read.table(file,header=T,sep="\t")
dat$fname <- file
return(dat)
}
dataset <- do.call(rbind, lapply(list.files(pattern="xls$"),read.data))
dataset$Log2SignalToNoise <- dataset$F.Log10SignalToNoise * log2(10)
rename(dataset, dataset = E.Name)
p <- ggplot(data=dataset, aes(x=Log2SignalToNoise, colour= dataset))
signaltonoise <- p + geom_density(alpha=0.4, size=1) + theme_bw() + xlim(-5,13) + scale_x_continuous(breaks=c(-5, 0,1,2,3,4,5,6,7,8,9,10))
print(signaltonoise)
dataset <- do.call(rbind, lapply(list.files(pattern="xls$"),read.data))
dataset$Log2SignalToNoise <- dataset$F.Log10SignalToNoise * log2(10)
rename(dataset, Dataset = E.Name)
View(dataset)
dataset$Log2SignalToNoise <- dataset$F.Log10SignalToNoise * log2(10)
rename(dataset, Dataset = E.Name)
dataset <- dataset %>% rename(Dataset = E.Name)
p <- ggplot(data=dataset, aes(x=Log2SignalToNoise, colour= Dataset))
signaltonoise <- p + geom_density(alpha=0.4, size=1) + theme_bw() + xlim(-5,13) + scale_x_continuous(breaks=c(-5, 0,1,2,3,4,5,6,7,8,9,10))
print(signaltonoise)
p <- ggplot(data=dataset, aes(x=Log2SignalToNoise, colour= Dataset))
p <- p + geom_density(alpha=0.4, size=1) + theme_bw()
p <- p + xlim(-5,13) + scale_x_continuous(breaks=c(-5, 0,1,2,3,4,5,6,7,8,9,10))
signaltonoise <- p + xlab(expression(Log[2](signal / noise)))
print(signaltonoise)
p <- ggplot(data=dataset, aes(x=Log2SignalToNoise, colour= Dataset))
p <- p + geom_density(alpha=0.4, size=1) + theme_bw()
p <- p + xlim(-5,13) + scale_x_continuous(breaks=c(-5, 0,1,2,3,4,5,6,7,8,9,10))
signaltonoise <- p + xlab(expression(log[2](signal / noise)))
print(signaltonoise)
pdf("Supp.Figure.D.pdf")
print(signaltonoise)
dev.off()
setwd("~/Dropbox/PAPER_SWATHbenchmark_prv/common_peptides")
l1 <- read.csv("TTOF6600_1ug_64w_Spectronaut7_sequencelist.csv",
header=F, stringsAsFactors=F)
l1$Spectronaut <- rep(T, nrow(l1))
l2 <- read.csv("TTOF6600_1ug_64w_Skyline_sequencelist.csv",
header=F, stringsAsFactors=F)
l2$Skyline <- rep(T, nrow(l2))
l3 <- read.csv("TTOF6600_1ug_64w_PeakView_sequencelist.csv",
header=F, stringsAsFactors=F)
l3$PeakView <- rep(T, nrow(l3))
l4 <- read.csv("openSWATH_6600-64w_r1_sequencelist.csv",
header=F, stringsAsFactors=F)
l4$OpenSWATH <- rep(T, nrow(l4))
l5 <- read.csv("DIAumpire_6600-64w_r1_sequencelist.csv",
header=F, stringsAsFactors=F)
l5$DIAumpire <- rep(T, nrow(l5))
commonPeptides <- merge(l1,l2, by="V1", all=T)
commonPeptides <- merge(commonPeptides,l3, by="V1", all=T)
commonPeptides <- merge(commonPeptides,l4, by="V1", all=T)
commonPeptides <- merge(commonPeptides,l5, by="V1", all=T)
library(dplyr, quietly=T, warn.conflicts=F)
if(!require(VennDiagram, quietly=T, warn.conflicts=F)) {
install.packages("VennDiagram")
library(VennDiagram, quietly=T, warn.conflicts=F)
}
Spectronaut_Skyline <- commonPeptides %>% filter( Spectronaut == T & Skyline == T )
Spectronaut_PeakView <- commonPeptides %>% filter( Spectronaut == T & PeakView == T )
PeakView_Skyline <- commonPeptides %>% filter( PeakView == T & Skyline == T )
Spectronaut_OpenSWATH <- commonPeptides %>% filter( Spectronaut = T & OpenSWATH == T)
paste("Spectronaut and Skyline:", nrow(Spectronaut_Skyline))
paste("Skyline and PeakView:", nrow(PeakView_Skyline))
paste("Spectronaut and PeakView:", nrow(Spectronaut_PeakView))
A = nrow(commonPeptides %>% filter( Spectronaut == T ))
B = nrow(commonPeptides %>% filter( Skyline == T ))
C = nrow(commonPeptides %>% filter( PeakView == T ))
D = nrow(commonPeptides %>% filter( OpenSWATH == T))
AB = nrow(commonPeptides %>% filter( Spectronaut == T & Skyline == T ))
AC = nrow(commonPeptides %>% filter( Spectronaut == T & PeakView == T ))
AD = nrow(commonPeptides %>% filter( Spectronaut == T & OpenSWATH == T ))
BC = nrow(commonPeptides %>% filter( Skyline == T & PeakView == T ))
BD = nrow(commonPeptides %>% filter( Skyline == T & OpenSWATH == T ))
CD = nrow(commonPeptides %>% filter( PeakView == T & OpenSWATH == T ))
ABC = nrow(commonPeptides %>% filter( Spectronaut == T & Skyline == T & PeakView == T))
ABD = nrow(commonPeptides %>% filter( Spectronaut == T & Skyline == T & OpenSWATH == T))
ACD = nrow(commonPeptides %>% filter( Spectronaut == T & PeakView == T & OpenSWATH == T))
BCD = nrow(commonPeptides %>% filter( Skyline == T & PeakView == T & OpenSWATH == T))
ABCD = nrow(commonPeptides %>% filter( Spectronaut == T & Skyline == T & PeakView == T & OpenSWATH == T))
n = nrow(commonPeptides)
grid.newpage()
#venndiag <- draw.triple.venn( A, B, C, AB, BC, AC, ABC,
#        category = names(commonPeptides)[2:4], scaled = F , euler.d=F, cex=2, cat.cex=2, cat.dist=c(.08,.08,.05), cat.pos=c(342,18,180),
#        fontfamily=rep("Helvetica",7), cat.fonfamily=rep("Helvetica",3), margin=.01)
venndiag4 <- draw.quad.venn(A, B, C, D, AB, AC, AD, BC, BD, CD, ABC, ABD, ACD, BCD, ABCD,
category=names(commonPeptides)[2:5], scaled = F, fill = c("red", "green", "yellow", "blue"))
venndiag4 <- venn.diagram(
x = list(
Spectronaut = unlist(commonPeptides %>% filter(Spectronaut == T) %>% select(V1)),
PeakView = unlist(commonPeptides %>% filter(PeakView == T) %>% select(V1)),
OpenSWATH = unlist(commonPeptides %>% filter(OpenSWATH == T) %>% select(V1)),
Skyline = unlist(commonPeptides %>% filter(Skyline == T) %>% select(V1))
),
fill = c("red", "green", "yellow", "blue")
)
venndiag4 <- venn.diagram(
x = list(
Spectronaut = unlist(commonPeptides %>% filter(Spectronaut == T) %>% select(V1)),
PeakView = unlist(commonPeptides %>% filter(PeakView == T) %>% select(V1)),
OpenSWATH = unlist(commonPeptides %>% filter(OpenSWATH == T) %>% select(V1)),
Skyline = unlist(commonPeptides %>% filter(Skyline == T) %>% select(V1))
),
filename = NULL,
fill = c("red", "green", "yellow", "blue")
)
print(venndiag4)
venndiag4 <- venn.diagram(
x = list(
Spectronaut = unlist(commonPeptides %>% filter(Spectronaut == T) %>% select(V1)),
PeakView = unlist(commonPeptides %>% filter(PeakView == T) %>% select(V1)),
OpenSWATH = unlist(commonPeptides %>% filter(OpenSWATH == T) %>% select(V1)),
Skyline = unlist(commonPeptides %>% filter(Skyline == T) %>% select(V1))
),
filename = "library_based_tools_overlap.tiff",
fill = c("red", "green", "yellow", "blue")
)
loadLibrary("VennDiagram")
library(LFQbench)
loadLibrary("VennDiagram")
venn.plot <- venn.diagram(
x = list(
library_based = unlist(commonproteins %>% filter(Spectronaut == T | PeakView == T |  Skyline == T | OpenSWATH == T) %>% select(protein)),
DIA_Umpire = unlist(commonproteins %>% filter(DIAumpire == T) %>% select(protein))
),
fontfamily="Arial",
filename = "Figure5E.tiff",
fill=c("yellow", rgb(0,191/255,196/255)),
cex=1.5, cat.cex=1.1, cat.dist=0.07,
category.names = rep("", 2)
)
setwd("~/Dropbox/PAPER_SWATHbenchmark_prv/protein_overlap")
source('~/.active-rstudio-document', echo=TRUE)
venn.plot <- venn.diagram(
x = list(
library_based = unlist(commonproteins %>% filter(Spectronaut == T | PeakView == T |  Skyline == T | OpenSWATH == T) %>% select(protein)),
DIA_Umpire = unlist(commonproteins %>% filter(DIAumpire == T) %>% select(protein))
),
fontfamily="Arial",
filename = "Figure5E.tiff",
fill=c("yellow", rgb(0,191/255,196/255)),
cex=1.5, cat.cex=1.1, cat.dist=0.07,
category.names = rep("", 2)
)
l <- venn.diagram(
x = list(
Spectronaut = unlist(commonproteins %>% filter(Spectronaut == T) %>% select(protein)),
PeakView = unlist(commonproteins %>% filter(PeakView == T) %>% select(protein)),
OpenSWATH = unlist(commonproteins %>% filter(OpenSWATH == T) %>% select(protein)),
Skyline = unlist(commonproteins %>% filter(Skyline == T) %>% select(protein))
),
filename = "Figure5D.tiff",
fontfamily="Arial",
fill=c("yellow", "red", "green", "cyan"),
cex=1.5, cat.cex=1.1, cat.dist=0.07,
category.names = rep("", 4)
)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/github_prj/LFQbench_package/LFQbench/inst/scripts/peptide_overlap")
l <- venn.diagram(
x = list(
Spectronaut = unlist(common.sequences %>% filter(Spectronaut == T) %>% select(sequenceID)),
PeakView = unlist(common.sequences %>% filter(PeakView == T) %>% select(sequenceID)),
OpenSWATH = unlist(common.sequences %>% filter(OpenSWATH == T) %>% select(sequenceID)),
Skyline = unlist(common.sequences %>% filter(Skyline == T) %>% select(sequenceID))
),
filename = "Figure5D_peptides.tiff",
fill=c("yellow", "red", "green", "cyan"),
cex=1, cat.cex=1.1, cat.dist=0.07
)
View(commonproteins)
View(common.sequences)
filter(common.sequences, grepl("\\[CAM", sequenceID))
head(filter(common.sequences, grepl("\\[CAM", sequenceID)))
head(filter(common.sequences, Spectronaut == TRUE)
)
head(filter(common.sequences, Spectronaut == TRUE & grepl("\\[" , sequenceID) ))
head(filter(common.sequences, Spectronaut == TRUE & grepl("\\[O" , sequenceID) ))
head(filter(common.sequences, Spectronaut == TRUE & grepl("\\(" , sequenceID) ))
head(filter(common.sequences, Spectronaut == TRUE & grepl("\(" , sequenceID) ))
head(filter(common.sequences, OpenSWATH == TRUE & grepl("\\(" , sequenceID) ))
head(filter(common.sequences, PeakView == TRUE & grepl("\\[" , sequenceID) ))
head(filter(common.sequences, PeakView == TRUE & grepl("\\[O" , sequenceID) ))
head(filter(common.sequences, Skyline == TRUE & grepl("\\[" , sequenceID) ))
diaump$sequenceID2 <- gsub("15\\.995\\(M\\)", "Oxi", diaump$sequenceID)
head(diaump[!(diaump$sequenceID == diaump$sequenceID2)])
diaump$sequenceID2
diaump[grepl("\[",diaump$sequenceID2)]$sequenceID2
diaump[grepl("\\[",diaump$sequenceID2)]$sequenceID2
diaump[grepl("\\[",diaump$sequenceID2),]$sequenceID2
diaump[grepl("\\[O",diaump$sequenceID2),]$sequenceID2
diaump[grepl("\\[O",diaump$sequenceID2),]
diaump$sequenceID2 <- gsub("\\[15\\.995\\(M\\)\\]M", "M\\[Oxi\\]", diaump$sequenceID)
diaump[grepl("\\[O",diaump$sequenceID2),]
diaump[grepl("\\[O",diaump$sequenceID2),]$sequenceID2
skyline$sequenceID
skyline[grepl("\\[O",skyline$sequenceID),]$sequenceID
skyline[grepl("\\[+",skyline$sequenceID),]$sequenceID
openswath[grepl("\\(Uni",openswath$sequenceID),]$sequenceID
openswath[grepl("\\(UniMod:35\\)",openswath$sequenceID),]$sequenceID
Vies(skyline)
View(skyline)
source('~/.active-rstudio-document', echo=TRUE)
View(skyline)
skyline[ grepl("\\[+57\\]", skyline$sequenceID), ]
skyline[ grepl("\\[\\+57\\]", skyline$sequenceID), ]
source('~/.active-rstudio-document', echo=TRUE)
hist(diaump$sequenceID)
hist(diaump$meanIntensity)
View(diaump)
sum(diaump$onlyDIAump)
nrow(diaump)
sum(diaump[diaump$specie=="HUMAN"]$onlyDIAump)
sum(diaump[diaump$specie=="HUMAN",]$onlyDIAump)
sum(diaump[diaump$specie=="YEAST",]$onlyDIAump)
sum(diaump[diaump$specie=="ECOLI",]$onlyDIAump)
11382+3086+1557
diaump.only.nrow <- nrow(common.sequences %>% filter(Spectronaut == F & Skyline == F & PeakView == F & OpenSWATH == F & DIAumpire == T))
require(knitr)
opts_chunk$set(echo = FALSE)
loadLibrary <- function(x)
{
if(!require(x, character.only=T, quietly = T, warn.conflicts=F))
{
install.packages(x); library(x, character.only=T, warn.conflicts=F)
}
}
loadLibrary("VennDiagram")
loadLibrary("tidyr")
loadLibrary("dplyr")
loadLibrary("ggplot2")
loadLibrary("readxl")
loadLibrary("classInt")
loadLibrary("scales")
loadLibrary("pander")
loadLibrary("GGally")
injection <- "lgillet_I150211_008"
## File names ##
spectronaut.file <- "/Users/napedro/Dropbox/PAPER_SWATHbenchmark_prv/output.from.softwares/draft.v2/iteration2/TTOF6600_64w/Spectronaut_20150522_140931_TTOF6600_64w_newLib_Report.tsv"
skyline.file <- "/Users/napedro/Dropbox/PAPER_SWATHbenchmark_prv/output.from.softwares/draft.v2/iteration2/TTOF6600_64w/Skyline_TTOF6600_64w_centroid_10minAs5_100Krp.tsv"
peakview.file <- "/Users/napedro/Dropbox/PAPER_SWATHbenchmark_prv/output.from.softwares/draft.v2/iteration2/TTOF6600_64w/PeakView_TTOF6600_64w_shift_iRT_extractionWindow10min_30ppm.xlsx"
openswath.file <- "/Users/napedro/Dropbox/PAPER_SWATHbenchmark_prv/output.from.softwares/draft.v2/iteration2/TTOF6600_64w/OpenSWATH_6600SW64_round2_30ppm_E1508100903_feature_alignment.tsv.gz"
diaumpire.file <- "/Users/napedro/Dropbox/PAPER_SWATHbenchmark_prv/output.from.softwares/draft.v2/iteration1/TTOF6600_64w/DIAumpire_6600_64_PeptideSummary.tsv"
q_filter_threshold <- 0.01
## PeakView ##
sequence.mod.var <- "Peptide"
charge.var <- "Precursor Charge"
fdr.var.tag <- "FDR"
quantitative.var <- "TotalAreaFragment"
quantitative.var.tag <- "Sample"
df.rt <- read_excel(peakview.file, sheet="Observed RT", col_names=T )
df.int <- read_excel(peakview.file, sheet="Area - peptides", col_names=T )
df.fdr <- read_excel(peakview.file, sheet="FDR", col_names=T )
df.fdr_rt <- cbind(df.fdr, df.rt[, 8:13])
df.fdr_rt <- df.fdr_rt[, grepl(injection, colnames(df.fdr_rt), ignore.case=T)]
df.fdr_rt <- cbind(df.rt[, 2:5], df.rt[, 7], df.fdr_rt)
df.fdr_rt$Label <- NULL
names(df.fdr_rt) <- c("Peptide", "mz", "z", "Decoy", "FDR", "RT" )
df.fdr_rt <- df.fdr_rt %>% filter(FDR <= q_filter_threshold)
df.int <- cbind(df.int[, 2:4],
df.int[, grepl(injection, colnames(df.int), ignore.case=T)])
names(df.int) <- c("Peptide", "mz", "z", "Intensity")
df.fdr_rt$sequence_z <- paste(df.fdr_rt$Peptide, df.fdr_rt$z, sep="_")
df.int$sequence_z <- paste(df.int$Peptide, df.int$z, sep="_" )
#remove possible duplicates
df.int <- df.int %>% filter(!duplicated(sequence_z))
df.fdr_rt <- df.fdr_rt %>% filter(!duplicated(sequence_z))
df <- inner_join(df.int, df.fdr_rt, by="sequence_z")
df <- df %>% filter(!is.na(FDR) & Decoy == "False")
peakview <- as.data.frame(cbind(
df$sequence_z,
gsub( "*\\[.*?\\]", "", df$Peptide.x ),
df$Peptide.x,
df$mz.x,
df$z.x,
df$Intensity,
df$RT,
rep("Peakview", nrow(df))
)
)
names(peakview) <- c("sequence_z", "Sequence", "Peptide", "mz", "z", "Intensity", "RT", "tool")
rm(df.fdr); rm(df.fdr_rt); rm(df.int); rm(df.rt); rm(df)
## DIA-Umpire ##
quantitative.var.tag <- "top6"
quantitative.var <- "top6Area"
protein.var <- "Protein"
filename.var <- "ReplicateName"
sequence.mod.var <- "ModSeq"
charge.var <- "Charge"
df <- read.table(diaumpire.file, na.strings= "NA", header=T,
sep="\t", stringsAsFactors =F, fill = T)
df.vars <- df[, grepl(injection, colnames(df) , ignore.case=T)]
diaumpire <- as.data.frame(cbind(
paste(df$Sequence, df$Charge, sep="_"),
df$Sequence,
df$ModSeq,
df$mz,
df$Charge,
df.vars[, grepl(quantitative.var.tag, colnames(df.vars) , ignore.case=T)],
df.vars[, grepl("RT", colnames(df.vars) , ignore.case=T)],
rep("DIAumpire", nrow(df))
)
)
names(diaumpire) <- c("sequence_z", "Sequence", "Peptide", "mz", "z", "Intensity", "RT", "tool")
rm(df.vars); rm(df)
## Skyline ##
q_filter_threshold <- 0.01
nastrings <- "#N/A"
df <- read.table(skyline.file, na.strings= nastrings, header=T,
sep="\t", stringsAsFactors =F, fill = T)
df <- df %>% filter(grepl(injection, FileName)) %>%
filter(IsDecoy == "False") %>%
filter(annotation_QValue <= q_filter_threshold)
skyline <- as.data.frame(cbind(
paste(df$PeptideModifiedSequence, df$PrecursorCharge, sep="_"),
df$PeptideSequence,
df$PeptideModifiedSequence,
df$PrecursorNeutralMass,
df$PrecursorCharge,
df$TotalArea,
df$BestRetentionTime,
rep("Skyline", nrow(df))
)
)
names(skyline) <- c("sequence_z", "Sequence", "Peptide", "mz", "z", "Intensity", "RT", "tool")
## Spectronaut ##
nastrings <- "NaN"
qvalue.var <- "EG.Qvalue"
protein.var <- "EG.ProteinId"
input.extension <- "*.tsv$"
input_format <- "long"  # Options: "long", "wide"
df <- read.table(spectronaut.file, na.strings= nastrings, header=T,
sep="\t", stringsAsFactors =F, fill = T)
df <- df %>% filter(grepl(injection, R.FileName))
spectronaut <- as.data.frame(cbind(
paste(df$EG.ModifiedSequence, df$FG.Charge, sep="_"),
df$EG.StrippedSequence,
df$EG.ModifiedSequence,
df$FG.PrecMz,
df$FG.Charge,
df$FG.NormalizedTotalPeakArea,
df$EG.MeanApexRT,
rep("Spectronaut", nrow(df))
)
)
names(spectronaut) <- c("sequence_z", "Sequence", "Peptide", "mz", "z", "Intensity", "RT", "tool")
## OpenSWATH ##
q_filter_threshold <- 0.01
quantitative.var <- "Intensity"
protein.var <- "ProteinName"
sequence.mod.var <- "FullPeptideName"
charge.var <- "Charge"
df <- read.table(openswath.file, header=T,
sep="\t", stringsAsFactors =F, fill = T)
df <- df %>% filter(grepl(injection, filename, ignore.case=T)) %>%
filter(decoy == F) %>%
filter(m_score <= q_filter_threshold)
openswath <- as.data.frame(cbind(
paste(df$FullPeptideName, df$Charge, sep="_"),
df$Sequence,
df$FullPeptideName,
df$m.z,
df$Charge,
df$Intensity,
df$RT / 60,
rep("OpenSWATH", nrow(df))
))
names(openswath) <- c("sequence_z", "Sequence", "Peptide", "mz", "z", "Intensity", "RT", "tool")
rm(df)
# join all to a single data frame
rts <- rbind(spectronaut, skyline)
rts <- rbind(rts, peakview)
rts <- rbind(rts, openswath)
rts <- rbind(rts, diaumpire)
rts <- rts %>%
mutate(
sequence_z = as.character(sequence_z),
Sequence = as.character(Sequence),
Peptide = as.character(Peptide),
mz = as.numeric(as.character(mz)),
z = as.numeric(as.character(z)),
Intensity = as.numeric(as.character(Intensity)),
RT = as.numeric(as.character(RT)),
tool = as.character(tool)
)
total_assays = length(unique(rts$Peptide))
total_peptides = length(unique(rts$Sequence))
removed_assays = total_assays - total_peptides
rts <- rts %>% filter( Sequence == Peptide )
rts_count <- rts %>% group_by(tool) %>% summarise(n())
rts_w <- rts %>% select(Sequence, z, tool, RT) %>% spread(key=tool, value=RT)
rts_w$numNAs <- numNAs <- apply(rts_w[, 3:7], 1, function(z) sum(is.na(z)))
View(rts_w)
q_filter_threshold <- 0.01
quantitative.var <- "Intensity"
protein.var <- "ProteinName"
sequence.mod.var <- "FullPeptideName"
charge.var <- "Charge"
df <- read.table(openswath.file, header=T,
sep="\t", stringsAsFactors =F, fill = T)
View(df)
df <- df %>% filter(grepl(injection, filename, ignore.case=T)) %>%
filter(decoy == F) %>%
filter(m_score <= q_filter_threshold)
filename
injection
View(df)
df <- read.table(openswath.file, header=T,
sep="\t", stringsAsFactors =F, fill = T)
View(df)
df2 <- df %>% filter(grepl(injection, filename, ignore.case=T))
injection
unique(df$filename)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
